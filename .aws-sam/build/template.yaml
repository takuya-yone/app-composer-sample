Transform: AWS::Serverless-2016-10-31
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub:
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
  Function:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Function
      CodeUri: Function
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiGET:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId:
              Ref: Api
      Environment:
        Variables:
          TOPIC_NAME:
            Fn::GetAtt:
            - Topic
            - TopicName
          TOPIC_ARN:
            Ref: Topic
          TABLE_NAME:
            Ref: Table
          TABLE_ARN:
            Fn::GetAtt:
            - Table
            - Arn
      Policies:
      - SNSPublishMessagePolicy:
          TopicName:
            Fn::GetAtt:
            - Topic
            - TopicName
      - DynamoDBCrudPolicy:
          TableName:
            Ref: Table
    Metadata:
      SamResourceId: Function
  FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${Function}
  Topic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint:
          Fn::GetAtt:
          - Queue
          - Arn
        Protocol: sqs
  Function2:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Function2
      CodeUri: Function2
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        Topic:
          Type: SNS
          Properties:
            Topic:
              Ref: Topic
            Region:
              Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Ref: Topic
        Table:
          Type: DynamoDB
          Properties:
            Stream:
              Fn::GetAtt:
              - Table
              - StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 1
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: Bucket
          BUCKET_ARN:
            Fn::GetAtt:
            - Bucket
            - Arn
      Policies:
      - S3CrudPolicy:
          BucketName:
            Ref: Bucket
    Metadata:
      SamResourceId: Function2
  Function2LogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${Function2}
  Queue:
    Type: AWS::SQS::Queue
  TopicToQueuePermission:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: sns.amazonaws.com
          Action: sqs:SendMessage
          Resource:
            Fn::GetAtt:
            - Queue
            - Arn
          Condition:
            ArnEquals:
              aws:SourceArn:
                Ref: Topic
      Queues:
      - Ref: Queue
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-bucket-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: aws:kms
            KMSMasterKeyID: alias/aws/s3
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  BucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: Bucket
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
        - Principal: '*'
          Action: '*'
          Effect: Deny
          Resource:
          - Fn::GetAtt:
            - Bucket
            - Arn
          - Fn::Sub: ${Bucket.Arn}/*
          Condition:
            Bool:
              aws:SecureTransport: 'false'
